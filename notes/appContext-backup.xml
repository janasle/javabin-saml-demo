<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

    <security:http entry-point-ref="samlEntryPoint">
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:intercept-url pattern="/logout.jsp" filters="none"/>
        <security:intercept-url pattern="/login.jsp" filters="none"/>
        <security:intercept-url pattern="/favicon.ico" filters="none"/>
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlProcessingFilter"/>
        <security:custom-filter position="PRE_AUTH_FILTER" ref="metadataFilter"/>
        <security:custom-filter before="PRE_AUTH_FILTER" ref="samlEntryPoint"/>
        <security:custom-filter after="LOGOUT_FILTER" ref="samlLogoutFilter"/>
        <security:custom-filter before="LOGOUT_FILTER" ref="samlLogoutProcessingFilter"/>
    </security:http>

    <!-- Register authentication manager with SAML provider -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider"/>
    </security:authentication-manager>

    <!-- Alias of the key used for SAML signing and encryption/decryption -->
    <bean name="privateKey" class="java.lang.String">
        <constructor-arg value="apollo"/>
    </bean>

    <!-- Key manager, set the JKS path and password to open the datastore -->
    <bean id="keyStore" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg index="0" value="classpath:security/samlKeystore.jks"/>
        <constructor-arg index="1" value="nalle123"/>
    </bean>

    <!-- Set keys which should be available to the system in the map, one of these keys must be also
         specified in the webSSOProfile later -->
    <bean id="keyResolver" class="org.opensaml.xml.security.credential.KeyStoreCredentialResolver">
        <constructor-arg index="0">
            <bean factory-bean="keyStore" factory-method="getKeyStore"/>
        </constructor-arg>
        <constructor-arg index="1">
            <map>
                <entry key="apollo" value="nalle123"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint"
          depends-on="metadata, webSSOprofile">
        <property name="webSSOprofile" ref="webSSOprofile"/>
        <property name="filterSuffix" value="/saml/login"/>
        <!-- OPTIONAL property: In case idpSelectionPath property is not set the user will be redirected to the default IDP -->
        <property name="idpSelectionPath" value="WEB-INF/security/idpSelection.jsp"/>
        <property name="metadata" ref="metadata"/>
    </bean>

    <!-- OPTIONAL bean: The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metatdata there -->
    <bean id="metadataFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter">
        <property name="manager" ref="metadata"/>
        <property name="generator" ref="metadataGenerator"/>
        <property name="filterSuffix" value="/saml/metadata"/>
    </bean>

    <!-- Class is capable of generating SP metadata describing the currently running envirnment -->
    <bean id="metadataGenerator" class="org.springframework.security.saml.metadata.MetadataGenerator">
        <property name="serverKeyAlias" ref="privateKey"/>
        <property name="credentialResolver" ref="keyResolver"/>
    </bean>

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
    <!-- Do no forget to call iniitalize method on providers -->
    <bean id="metadata" class="org.springframework.security.saml.metadata.MetadataManager" depends-on="bootstrap">
        <constructor-arg index="0">
            <list>
                <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider" init-method="initialize">
                    <constructor-arg index="0">
                        <value type="java.io.File">classpath:security/idp.xml</value>
                    </constructor-arg>
                    <property name="parserPool" ref="parserPool"/>
                </bean>
                <bean class="org.opensaml.saml2.metadata.provider.HTTPMetadataProvider" init-method="initialize">
                    <!-- URL containing the metadata -->
                    <constructor-arg index="0">
                        <value type="java.lang.String">http://idp.ssocircle.com/idp-meta.xml</value>
                    </constructor-arg>
                    <!-- Timeout for metadata loading in ms -->
                    <constructor-arg index="1">
                        <value type="int">5000</value>
                    </constructor-arg>
                    <property name="parserPool" ref="parserPool"/>
                </bean>
            </list>
        </constructor-arg>
        <!-- OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
        <property name="defaultIDP" value="http://localhost:8080/opensso"/>
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl" depends-on="bootstrap">
        <constructor-arg index="0" ref="metadata"/>
        <property name="parser" ref="parserPool"/>
        <property name="resolver" ref="keyResolver"/>
    </bean>

    <!-- SAML Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl" depends-on="bootstrap">
        <constructor-arg index="0" ref="metadata"/>
        <constructor-arg index="1" ref="keyResolver"/>
        <!-- The name of key to use for encryption/signing purposes must be set here -->
        <constructor-arg index="2" ref="privateKey"/>
    </bean>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"
          depends-on="bootstrap">
        <constructor-arg index="0" ref="metadata"/>
        <constructor-arg index="1" ref="keyResolver"/>
        <!-- The name of key to use for encryption/signing purposes must be set here -->
        <constructor-arg index="2" ref="privateKey"/>
    </bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
        <constructor-arg index="0" ref="webSSOprofileConsumber"/>
        <!-- OPTIONAL property: can be used to store/load user data after login -->
        <!--
        <property name="userDetails" ref="bean" />
        -->
    </bean>

    <!-- Initialization of OpenSAML library-->
    <bean id="bootstrap" class="org.opensaml.DefaultBootstrap" init-method="bootstrap" lazy-init="false"/>

    <!-- Override default authentication processing filter with the one processing SAML messages -->
    <bean id="samlProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter"
          depends-on="bootstrap">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="defaultTargetUrl" value="/"/>
        <property name="filterProcessesUrl" value="/saml/SSO"/>
        <property name="SAMLProcessor" ref="processor"/>
    </bean>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter" depends-on="bootstrap">
        <constructor-arg index="0" value="/index.jsp"/>
        <constructor-arg index="1" ref="logoutHandler"/>
        <constructor-arg index="2" ref="logoutHandler"/>
        <constructor-arg index="3" ref="logoutprofile"/>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter"
          depends-on="bootstrap">
        <constructor-arg index="0" value="/index.jsp"/>
        <constructor-arg index="1" ref="logoutHandler"/>
        <property name="logoutProfile" ref="logoutprofile"/>
        <property name="SAMLProcessor" ref="processor"/>
    </bean>

    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="false"/>
    </bean>

    <!-- Consumer of assertions obtained from IDPs -->
    <bean id="webSSOprofileConsumber" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl"
          depends-on="bootstrap">
        <constructor-arg index="0" ref="metadata"/>
        <constructor-arg index="1" ref="keyResolver"/>
        <constructor-arg index="2" ref="privateKey"/>
    </bean>

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.BasicParserPool" scope="singleton"/>

    <!-- Makes the parserPool available in the static holder -->
    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" lazy-init="false"
          depends-on="parserPool">
        <constructor-arg index="0" ref="parserPool"/>
    </bean>

</beans>